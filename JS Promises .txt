Promises in JavaScript (❗important) 🤝
Promises are at the heart of Asynchronous JS.

The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.

A promise can be in one of these three states:

Pending: initial state, neither fulfilled nor rejected
Fulfilled: operation was completed successfully
Rejected: operation failed

const promise = new Promise((resolve, reject) => {
   let value = true 
   if (value){
     resolve('hey value is true')
   }else {
    reject('there was an error, value is false')
   }
})

promise
	.then((x)=>{
		console.log(x)
	})
	.catch((err)=> console.log(err))
	
//Instead of then/catch, we can also use async/await:

async function asyncCall() {
  const result = await promise
  console.log(result)
}

asyncCall()